{
  "swagger": "2.0",
  "info": {
    "title": "sdlc_control_plane/v1alpha1/policy_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "PolicyService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1alpha1/policies": {
      "get": {
        "summary": "List/Search Policies",
        "operationId": "PolicyService_ListPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "description": "Filter expression based on identity, subject, etc.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "Pagination size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Pagination token",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      },
      "post": {
        "summary": "Create Policy",
        "operationId": "PolicyService_CreatePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1Policy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1Policy"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1alpha1/policies/{id}": {
      "get": {
        "summary": "Get Policy",
        "operationId": "PolicyService_GetPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1Policy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the policy to retrieve",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      },
      "delete": {
        "summary": "Delete Policy",
        "operationId": "PolicyService_DeletePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the policy to delete",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1alpha1/policies/{policy.id}": {
      "patch": {
        "summary": "Update Policy",
        "operationId": "PolicyService_UpdatePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1Policy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policy.id",
            "description": "Unique identifier for the policy",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "policy",
            "description": "Policy message",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string",
                  "title": "Description of what the policy enforces"
                },
                "conditions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1Condition"
                  },
                  "title": "Conditions to be checked (identity, timeframe, etc.)"
                },
                "parentPolicyIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "For hierarchical policies, references to parent policies"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "title": "Timestamp when the policy was created"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "title": "Timestamp when the policy was last updated"
                }
              },
              "title": "Policy message"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1alpha1Condition": {
      "type": "object",
      "properties": {
        "identityCondition": {
          "$ref": "#/definitions/v1alpha1IdentityCondition",
          "title": "Identity of the entity signing the attestation"
        },
        "timeframeCondition": {
          "$ref": "#/definitions/v1alpha1TimeframeCondition",
          "title": "Timeframe of attestation creation"
        },
        "subjectCondition": {
          "$ref": "#/definitions/v1alpha1SubjectCondition",
          "title": "The subject of the attestation (hash or commit ID)"
        },
        "contentCondition": {
          "$ref": "#/definitions/v1alpha1ContentCondition",
          "title": "Content checks on key-value pairs in the attestation"
        }
      },
      "title": "Condition for Policy"
    },
    "v1alpha1ContentCondition": {
      "type": "object",
      "properties": {
        "requiredKeyValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Key-value pairs that must exist in the attestation content"
        }
      },
      "title": "Content Condition"
    },
    "v1alpha1IdentityCondition": {
      "type": "object",
      "properties": {
        "allowedSigners": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of allowed identities (can be systems, users, build systems, etc.)"
        }
      },
      "title": "Identity Condition"
    },
    "v1alpha1ListPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1Policy"
          }
        },
        "nextPageToken": {
          "type": "string",
          "title": "Pagination token for next set"
        }
      },
      "title": "ListPoliciesResponse"
    },
    "v1alpha1Policy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique identifier for the policy"
        },
        "description": {
          "type": "string",
          "title": "Description of what the policy enforces"
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1Condition"
          },
          "title": "Conditions to be checked (identity, timeframe, etc.)"
        },
        "parentPolicyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "For hierarchical policies, references to parent policies"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "Timestamp when the policy was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "Timestamp when the policy was last updated"
        }
      },
      "title": "Policy message"
    },
    "v1alpha1SubjectCondition": {
      "type": "object",
      "properties": {
        "expectedSubject": {
          "type": "string",
          "title": "Expected subject of the attestation (e.g., hash or commit ID)"
        }
      },
      "title": "Subject Condition"
    },
    "v1alpha1TimeframeCondition": {
      "type": "object",
      "properties": {
        "validDuration": {
          "type": "string",
          "title": "Timeframe within which the attestation is valid (e.g., 7 days)"
        }
      },
      "title": "Timeframe Condition"
    }
  }
}
